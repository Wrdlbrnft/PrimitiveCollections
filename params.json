{
  "name": "PrimitiveCollections",
  "tagline": "A lightweight library for efficient Sets and Lists of primitive values.",
  "body": " - **Efficient implementations**: The collection implementations are designed to guarantee best possible performance. Different collection implementations are specialized for different use cases.  \r\n - **Avoids boxing and unboxing**: No boxing or unboxing of the primitive values occurs anywhere in the library. That allows for best possible performance and more reliability.\r\n\r\n[![Build Status](https://travis-ci.org/Wrdlbrnft/PrimitiveCollections.svg?branch=master)](https://travis-ci.org/Wrdlbrnft/PrimitiveCollections)\r\n\r\n## How do I add it to my project?\r\n\r\nJust add this dependency to your build.gradle file:\r\n\r\n```groovy\r\ncompile 'com.github.wrdlbrnft:primitive-collections:0.2.0.1'\r\n```\r\n\r\n## How do I use it?\r\n\r\nPrimitiveCollections includes collection implementations for the following primitives:\r\n\r\n - `int`\r\n - `long`\r\n - `char`\r\n - `byte`\r\n - `float`\r\n - `double`\r\n \r\nFor each type a separate collection interface with two implementations for either a list or a set exists:\r\n \r\n - `IntCollection`: `IntSet` and `IntList`\r\n - `LongCollection`: `LongSet` and `LongList`\r\n - `CharCollection`: `CharSet` and `CharList`\r\n - `ByteCollection`: `ByteSet` and `ByteList`\r\n - `FloatCollection`: `FloatSet` and `FloatList`\r\n - `DoubleCollection`: `DoubleSet` and `DoubleList`\r\n\r\nAll collections work exactly the same way, the only difference is the primitive type they are made for.\r\n\r\nAs an example:\r\n\r\n```java\r\nIntCollection collection = new IntList();\r\n\r\n// Adding values to the collection\r\ncollection.add(someValue);\r\n\r\n// Checking if a value is contained in the collection\r\nif(collection.contains(someOtherValue)) {\r\n    // Value is contained in the `IntSet`\r\n}\r\n\r\n// Iterating over all items in the collection\r\nfor(int i = 0, count = collection.size(); i < count; i++) {\r\n\r\n    // Value at index i\r\n    int value = collection.get(i);\r\n}\r\n\r\n// Getting an array of all the values in the collection.\r\nint[] array = collection.toArray();\r\n```\r\n\r\nThe difference between the list and set implementations is that a set can contain each unique value only once and that the items it contains are in an undefined order.\r\n\r\nThe list implementations keep items in the order they were added to the collections and allow for the same value to be added multiple times.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}